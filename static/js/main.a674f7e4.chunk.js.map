{"version":3,"sources":["components/MenuComponent.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","state","dishes","id","name","image","category","label","price","description","menu","this","map","key","className","tag","left","middle","object","src","alt","body","heading","list","Component","App","dark","color","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAyEeA,E,kDApEX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,OAAQ,CACJ,CACEC,GAAI,EACJC,KAAK,aACLC,MAAO,+BACPC,SAAU,QACVC,MAAM,MACNC,MAAM,OACNC,YAAY,oLACf,CACGN,GAAI,EACJC,KAAK,eACLC,MAAO,iCACPC,SAAU,YACVC,MAAM,GACNC,MAAM,OACNC,YAAY,qHACf,CACGN,GAAI,EACJC,KAAK,UACLC,MAAO,4BACPC,SAAU,YACVC,MAAM,MACNC,MAAM,OACNC,YAAY,yEACf,CACGN,GAAI,EACJC,KAAK,kBACLC,MAAO,mCACPC,SAAU,UACVC,MAAM,GACNC,MAAM,OACNC,YAAY,qHAnCR,E,qDAwCd,IAAMC,EAAOC,KAAKV,MAAMC,OAAOU,KAAI,SAACV,GAChC,OACE,yBAAKW,IAAKX,EAAOC,GAAIW,UAAU,eAC7B,kBAAC,IAAD,CAAOC,IAAI,MACT,kBAAC,IAAD,CAAOC,MAAI,EAACC,QAAM,GACd,kBAAC,IAAD,CAAOC,QAAM,EAACC,IAAKjB,EAAOG,MAAOe,IAAKlB,EAAOE,QAEjD,kBAAC,IAAD,CAAOiB,MAAI,EAACP,UAAU,QACpB,kBAAC,IAAD,CAAOQ,SAAO,GAAEpB,EAAOE,MACvB,2BAAIF,EAAOO,mBAOvB,OACE,yBAAKK,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAOS,MAAI,GACNb,S,GA9DAc,aCiBJC,E,uKAbX,OACE,6BACE,kBAAC,IAAD,CAAQC,MAAI,EAACC,MAAM,WACf,yBAAKb,UAAU,aACb,kBAAC,IAAD,CAAac,KAAK,KAAlB,2BAGN,kBAAC,EAAD,W,GATUJ,aCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a674f7e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Media } from 'reactstrap';\r\n\r\nclass Menu extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            dishes: [\r\n                {\r\n                  id: 0,\r\n                  name:'Uthappizza',\r\n                  image: 'assets/images/uthappizza.png',\r\n                  category: 'mains',\r\n                  label:'Hot',\r\n                  price:'4.99',\r\n                  description:'A unique combination of Indian Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer.'                        },\r\n               {\r\n                  id: 1,\r\n                  name:'Zucchipakoda',\r\n                  image: 'assets/images/zucchipakoda.png',\r\n                  category: 'appetizer',\r\n                  label:'',\r\n                  price:'1.99',\r\n                  description:'Deep fried Zucchini coated with mildly spiced Chickpea flour batter accompanied with a sweet-tangy tamarind sauce'                        },\r\n               {\r\n                  id: 2,\r\n                  name:'Vadonut',\r\n                  image: 'assets/images/vadonut.png',\r\n                  category: 'appetizer',\r\n                  label:'New',\r\n                  price:'1.99',\r\n                  description:'A quintessential ConFusion experience, is it a vada or is it a donut?'                        },\r\n               {\r\n                  id: 3,\r\n                  name:'ElaiCheese Cake',\r\n                  image: 'assets/images/elaicheesecake.png',\r\n                  category: 'dessert',\r\n                  label:'',\r\n                  price:'2.99',\r\n                  description:'A delectable, semi-sweet New York Style Cheese Cake, with Graham cracker crust and spiced with Indian cardamoms'                        }\r\n               ],\r\n        };\r\n    };\r\n    render() {\r\n        const menu = this.state.dishes.map((dishes) => {\r\n            return (\r\n              <div key={dishes.id} className=\"col-12 mt-5\">\r\n                <Media tag=\"li\">\r\n                  <Media left middle>\r\n                      <Media object src={dishes.image} alt={dishes.name} />\r\n                  </Media>\r\n                  <Media body className=\"ml-5\">\r\n                    <Media heading>{dishes.name}</Media>\r\n                    <p>{dishes.description}</p>\r\n                  </Media>\r\n                </Media>\r\n              </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <Media list>\r\n                  {menu}\r\n              </Media>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\nimport './App.css';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport Menu from './components/MenuComponent';\n\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <Navbar dark color=\"primary\">\n            <div className=\"container\">\n              <NavbarBrand href=\"/\">Ristorante Con Fusion</NavbarBrand>\n            </div>\n        </Navbar>\n        <Menu />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}